///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// SF02_ACS
// map script
#library "sf02"

// top priority
#import "f_IntDB.acs"
#import "f_Tip.acs"

// minor
#import "fc_AStr.acs"
#import "fc_Comm.acs"
#import "fc_Entr.acs"
#import "f_SecMan.acs"
#import "f_MonAtt.acs"
#import "f_AIDRL.acs"
#import "f_FinalF.acs"
#import "f_PMen.acs"
#import "f_PHUD.acs"
#import "f_Rank.acs"
#import "f_Cred.acs"
#import "f_PStat.acs"
#import "f_StokP.acs"
#import "f_Battr.acs"
//#import "f_TaticalMap.acs"
#import "f_Core.acs"

#include "zcommon.acs"

script 88 OPEN
{
	// setup gametype value
	f_UseScoreSystem = 0;
	f_Gametype =    1;
	// game settings
	f_Startcash =   2500;                   // player starting cash, 2500 is the default
	c_Startcash =   5000;                   // starting cash for the commander (SF maps only)
	f_Doortype =    1;                      // 0 is a normal door, 1 is a floor based door
	f_Doorspeed =   50;                     // speed of the door opening, 50 is the default
	f_GameLength =  18;                     // Gametime in minutes, +2 min after guardian warning, 28 default (30 min gametime)
	f_AISkillMultiplier = 4;               // increase in levels, higher means harder (aka: the RapeFactor variable)

	f_AdaptiveSpawning = 0;
	f_Cacodemons = 0;

        readconsole();

	f_AllowNuke =   1;
	f_AllowIon =    1;
}

// map setup
script 1 OPEN
{
    sector_setfade(3, 0, 0, 0);
}

// epic mothership boss script
script 90 (void)
{
    // change music
    Music_Change("D_BOSS", 1);
    
    acs_execute(89, 0, 0, 0, 0);
    int ticker;
    while(ticker < PlayerCount() * 3 + 5)
    {
        ticker++;
        delay(35*2);
    }
    acs_terminate(89, 0);
    while(thingcount(0, 118) > 10 || thingcount(0, 111) > 10 || thingcount(0, 112) > 10 || thingcount(0, 113) > 10 || thingcount(0, 114) > 10 || thingcount(0, 24) > 3)
        delay(35 * 1);
    thing_destroy(118, 100);
    thing_destroy(111, 100);
    thing_destroy(112, 100);
    thing_destroy(113, 100);
    thing_destroy(114, 100);
    thing_destroy(24, 100);
    
    // endgame
    acs_execute(125, 0, 2, 0, 0);
}
    
script 91 (void)
{
    delay(35 * 6);
    f_TipShow ("DEMONT", "Elevator Doors", "Jammed! Destroy the Mothership Spires to continue...", 0);
    while(thingcount(0, 6) > 0)
    {
        delay(35);
    }
    delay(35 * 3);
    f_TipShow ("DEMONT", "Elevator Doors", "Opening!", 0);
    thing_activate(8);
    floor_lowertonearest(4, 10);
    delay(35 * 10);
    f_TipShow ("DEMONT", "Main Portal", "Activate new destination once you get to the ground...", 0);
    
}

// elevator activated
script 2 (void)
{
    f_TipShow ("DEMONT", "Elevator", "Is going to the ground floor!", 0);
    delay(35 * 5);
    floor_raisetonearest(4, 10);
    delay(35 * 2);
    floor_lowertolowest(5, 5);
    
    delay(35 * 60 * 2);
    thing_activate(9);
    delay(35 * 20);
    
    f_TipShow ("DEMONT", "Elevator", "Returning to top floor", 0);
    floor_raisetohighest(5, 10);
    
    delay(35 * 60);
    delay(35 * 10);
    
    f_TipShow ("DEMONT", "Elevator Doors", "Opening!", 0);
    floor_lowertonearest(4, 10);
    delay(35 * 4);
    f_TipShow ("DEMONT", "Elevator", "Ready for use...", 0);
}

// reroute main portal
script 4 (void)
{
    f_TipShow ("DEMONT", "Main Portal", "Reactivated to goto Ground floor...", 0);
    g_SpecialPortal = 50;
}

// activating the nuke lift
script 5 (void)
{
    // spawn some cyberdemons
    spawnspot("Cyberdemon", 11, 0, 0);
    
    f_TipShow ("DEMONT", "Silo Lift", "Activated! Get to it and make the final push!", 0);
    floor_lowertolowest(7, 10);
}

// raising the nuke lift
script 7 (void)
{
    floor_raisetohighest(7, 30);
}

// give or take nuke launcher
script 6 (int l_Type)
{
    if(l_Type == 0)
    {
        giveinventory("NukeLauncher", 1);
        setfont("CONFONT");
        print(s:"Press '7' to use the Nuke Launcher");
    }
    if(l_Type == 1)
    {
        takeinventory("NukeLauncher", 5);
    }
}

// destruction of earth
script 8 (void)
{
    thing_activate(14);
    ambientsound("mothership3", 125);
    
    
    delay(35 * 7);
    acs_execute(126, 0, 1, 0, 0);
    setactorstate(14, "Death", 1);
    
    delay(35 * 2);
    acs_execute(126, 0, 0, 0, 0);
    
    // always kill the players
    acs_execute(9, 0, 0, 0, 0);
    for (int i = 0; i < 32; i++)
    {
        thrustthingz(990+i, 100, 0, 1);
    }
    
    ChangeSky("STARMP", "STARMP");
    sector_setfade(0, 2, 0, 0);
    sector_setfade(3, 2, 0, 0);
    changefloor(13, "F_SKY1");
    
    delay(35 * 3);
    thing_destroy(104, 1);
}

// player is destined to die
script 9 (void)
{
    while(1)
    {
        for (int i = 0; i < 32; i++)
        {
            thing_destroy(990, 1);
            delay(35);
        }
    }
}

script 10 (void)
{
    acs_terminate(8, 0);
    acs_terminate(90, 0);
    thing_remove(8);
    thing_remove(9);
    thing_remove(6);
    acs_execute(126, 0, 1, 0, 0);
    delay(35 * 3);
    acs_execute(125, 0, 2, 0, 0);
}

// death sound
script 11 (void)
{   
    ambientsound("mothership2", 125);
}

// check the demonic turrets for the passage doors
script 12 (void)
{
    while(thingcount(0, 20))     delay(70);
    floor_lowertolowest(16, 100);
    while(thingcount(0, 26))     delay(70);
    floor_lowertolowest(17, 100);
    while(thingcount(0, 25))     delay(70);
    floor_lowertolowest(18, 100);
    while(thingcount(0, 24))     delay(70);
    floor_lowertolowest(19, 100);
}

script 33 (void)
{
    // destroy actor
    thing_remove(0);
}


// nuke enemies
script 89 (void)
{
    floor_lowertonearest(4, 10);
    while(1)
    {
        spawnspot("sfCacodemon", 21, 24, 0);
        spawnspot("sfCacodemon", 22, 24, 0);
        if (PlayerCount() > 3){
        spawnspot("Cyberdemon", 117, 24, 0);}
        
        thing_hate(24, 104, 4);
        thing_hate(110, 104, 4);
        thing_hate(111, 104, 4);
        thing_hate(112, 104, 4);
        thing_hate(113, 104, 4);
        delay(35 * 5);
    }
}
