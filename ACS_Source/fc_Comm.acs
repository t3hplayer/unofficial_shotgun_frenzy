///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// fc_Command.acs
// commander mode
// camera control script adapted from Tribeam's script
#library "fc_Comm"

// include external commander scripts
#import "f_IntDB.acs"
#import "f_Tip.acs"
#import "fc_CommB.acs"
#import "fc_Mouse.acs"
#import "fc_Const.acs"
#import "fc_GLab.acs"
#import "fc_Armor.acs"
#import "fc_MComm.acs"
#import "fc_Ref.acs"
#import "fc_DLab.acs"
#import "fc_NSilo.acs"

#include "zcommon.acs"

int scriptpulse;

// money bag temp disable
script 966 (void)
{
    allow_moneybag = 0;
    delay(35 * 5);
    allow_moneybag = 1;
}

// ************** CLIENTSIDE HUDMESSAGE SCRIPTS ************** 

script 601 (int l_Type)
{
    switch(l_Type)
    {
        case 1:
            setfont("HUDCOM");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 145, 0, 0.1, 0.1, 15.0);
            break;
        case 2:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 508.1, 369.1, 0.1);
            break;
        case 3:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 540.1, 369.1, 0.1);
            break;
        case 4:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 572.1, 369.1, 0.1);
            break;
        case 5:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 604.1, 369.1, 0.1);
            break;
        case 6:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 508.1, 401.1, 0.1);
            break;
        case 7:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 540.1, 401.1, 0.1);
            break;
        case 8:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 572.1, 401.1, 0.1);
            break;
        case 9:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 604.1, 401.1, 0.1);
            break;
        case 10:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 508.1, 433.1, 0.1);
            break;
        case 11:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 540.1, 433.1, 0.1);
            break;
        case 12:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 572.1, 433.1, 0.1);
            break;
        case 13:
            setfont("BUTTONS");
            sethudsize(640, 480, 1);
            hudmessage(s:"a"; 1, 0, 0, 604.1, 433.1, 0.1);
            break;
            
    }
}

// *********************************************************** 

// detect players input (1= Up, 2= Down, 3= Use)
function int c_CameraInputX (void)
{
    // to return
    int l_Input;
    
    // key scanning
    if (getplayerinput(playernumber(), INPUT_FORWARDMOVE) > 0)      l_Input = 1;
    if (getplayerinput(playernumber(), INPUT_FORWARDMOVE) < 0)      l_Input = 2;
    if (getplayerinput(playernumber(), INPUT_BUTTONS) & BT_USE)     l_Input = 3;
    
    return l_Input;
}

function int c_CameraInputY (void)
{
    // to return
    int l_Input;
    
    // key scanning
    if (getplayerinput(playernumber(), INPUT_SIDEMOVE) > 0)         l_Input = 1;
    if (getplayerinput(playernumber(), INPUT_SIDEMOVE) < 0)         l_Input = 2;
    if (getplayerinput(playernumber(), INPUT_BUTTONS) & BT_USE)     l_Input = 3;
    if (getplayerinput(playernumber(), INPUT_BUTTONS) & BT_USE && getplayerinput(playernumber(), INPUT_SIDEMOVE) < 0)     l_Input = 4;
    if (getplayerinput(playernumber(), INPUT_BUTTONS) & BT_USE && getplayerinput(playernumber(), INPUT_SIDEMOVE) > 0)     l_Input = 5;
    
    return l_Input;
}

// activate the commander mode
script 130 (void)
{
    // make sure the player is not a tank
    if(p_TankSlot[playernumber()] == 2)
    {
        f_CenterTip("You cannot command...\nYou're a tank!");
        terminate;
    }
    
    ACS_Execute(133,0,0,0,0); //Script life check
    ACS_Execute(968,0,0,0,0); //mouse pointer
    
    // return whos commanding
    c_Commander = playernumber();
    f_TipShow("PLAYER", "", "Has entered the command chair...", 10);
    f_CenterTip("Welcome commander...");
    
    // setup the camera
    changecamera(130, 0, 0);
    
    // freeze the player
    setplayerproperty(0, 1, PROP_TOTALLYFROZEN);
	
	//Block the player
	SpawnSpotForced("CommanderBlocker",0,3568,0);
    
    // fade effect
    fadeto(0, 0, 0, 1.0, 0.0);
    fadeto(0, 0, 0, 0.0, 1.0);
    
    // prepare the pointer
    Cursor_Info[CURSOR_X] = 320;
    Cursor_Info[CURSOR_Y] = 240;
    
    // call clickscanner
    acs_execute(131, 0, 0, 0, 0);
    
    localambientsound("cv/welcomecommander", 125);
    
    // load up demon count per sector
    acs_execute(969, 0, 0, 0, 0);
    
    // begin commanding
    while(c_Commander == playernumber() && playeringame(c_Commander) && getactorproperty(0, APROP_Health) > 0)
    {
		scriptpulse = 0;
        // camera restrictions
        if (getactory(130) > getactory(131))       thrustthing(192, 200, 0, 130);       // top
        if (getactory(130) < getactory(134))       thrustthing(64, 200, 0, 130);        // bottom
        
        if (getactorx(130) < getactorx(132))       thrustthing(0, 200, 0, 130);        // left
        if (getactorx(130) > getactorx(133))       thrustthing(128, 200, 0, 130);        // right
        
        // commanders not idle?
        if (getplayerinput(-1, INPUT_YAW) != 0 || getplayerinput(-1, INPUT_PITCH) != 0 || c_CameraInputX() != 0 || c_CameraInputY() != 0 || getplayerinput(playernumber(), INPUT_BUTTONS) & BT_ATTACK)
        {
            if (getplayerinput(playernumber(), INPUT_BUTTONS) & BT_USE)
            {
                if(getplayerinput(playernumber(), INPUT_SIDEMOVE) < 0)      setactorangle(130, getactorangle(130) + 1000);
                if(getplayerinput(playernumber(), INPUT_SIDEMOVE) > 0)      setactorangle(130, getactorangle(130) - 1000);
            }
            
            else
            {
                // camera movement
                if (getplayerinput(playernumber(), INPUT_FORWARDMOVE) > 0)     thrustthing(getactorangle(130) >> 8, 4, 0, 130);
                if (getplayerinput(playernumber(), INPUT_FORWARDMOVE) < 0)        thrustthing(getactorangle(130) + 0.5 >> 8, 4, 0, 130);
                if (getplayerinput(playernumber(), INPUT_SIDEMOVE) > 0)     thrustthing(getactorangle(130) + 0.75 >> 8, 4, 0, 130);
                if (getplayerinput(playernumber(), INPUT_SIDEMOVE) < 0)     thrustthing(getactorangle(130) + 0.25 >> 8, 4, 0, 130);
            }
            
            // camera tilting
            //if (CheckActorCeilingTexture(130, "F_SKY1"))      setactorpitch(130, 0.085);
            //else                                            setactorpitch(130, 0.04);
            setactorpitch(130, 0.085);
            
            // CLIENTSIDE -- load hudmessage
            acs_executealways(601, 0, 1, 0, 0);
            
            //setfont("CONFONT");
            //hudmessage(s:"Current Selection: ",d:c_ButtonSel; 0, 144, 0, 320.0, 240.0, 1.0);
            
            // button scanning
            // CLIENTSIDE -- load hudmessage
            if (Cursor_Info[CURSOR_X] > 508 && Cursor_Info[CURSOR_X] < 539 && Cursor_Info[CURSOR_Y] > 369 && Cursor_Info[CURSOR_Y] < 400)   { c_ButtonSel = 1; acs_executealways(601, 0, 2, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 540 && Cursor_Info[CURSOR_X] < 571 && Cursor_Info[CURSOR_Y] > 369 && Cursor_Info[CURSOR_Y] < 400)   { c_ButtonSel = 2; acs_executealways(601, 0, 3, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 572 && Cursor_Info[CURSOR_X] < 603 && Cursor_Info[CURSOR_Y] > 369 && Cursor_Info[CURSOR_Y] < 400)   { c_ButtonSel = 3; acs_executealways(601, 0, 4, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 604 && Cursor_Info[CURSOR_X] < 635 && Cursor_Info[CURSOR_Y] > 369 && Cursor_Info[CURSOR_Y] < 400)   { c_ButtonSel = 4; acs_executealways(601, 0, 5, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 508 && Cursor_Info[CURSOR_X] < 539 && Cursor_Info[CURSOR_Y] > 401 && Cursor_Info[CURSOR_Y] < 432)   { c_ButtonSel = 5; acs_executealways(601, 0, 6, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 540 && Cursor_Info[CURSOR_X] < 571 && Cursor_Info[CURSOR_Y] > 401 && Cursor_Info[CURSOR_Y] < 432)   { c_ButtonSel = 6; acs_executealways(601, 0, 7, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 572 && Cursor_Info[CURSOR_X] < 603 && Cursor_Info[CURSOR_Y] > 401 && Cursor_Info[CURSOR_Y] < 432)   { c_ButtonSel = 7; acs_executealways(601, 0, 8, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 604 && Cursor_Info[CURSOR_X] < 635 && Cursor_Info[CURSOR_Y] > 401 && Cursor_Info[CURSOR_Y] < 432)   { c_ButtonSel = 8; acs_executealways(601, 0, 9, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 508 && Cursor_Info[CURSOR_X] < 539 && Cursor_Info[CURSOR_Y] > 433 && Cursor_Info[CURSOR_Y] < 464)   { c_ButtonSel = 9; acs_executealways(601, 0, 10, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 540 && Cursor_Info[CURSOR_X] < 571 && Cursor_Info[CURSOR_Y] > 433 && Cursor_Info[CURSOR_Y] < 464)   { c_ButtonSel = 10; acs_executealways(601, 0, 11, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 572 && Cursor_Info[CURSOR_X] < 603 && Cursor_Info[CURSOR_Y] > 433 && Cursor_Info[CURSOR_Y] < 464)   { c_ButtonSel = 11; acs_executealways(601, 0, 12, 0, 0); }
            if (Cursor_Info[CURSOR_X] > 604 && Cursor_Info[CURSOR_X] < 635 && Cursor_Info[CURSOR_Y] > 433 && Cursor_Info[CURSOR_Y] < 464)   { c_ButtonSel = 12; acs_executealways(601, 0, 13, 0, 0); }
            
            // display buttons
            fc_CommandButtons_Call();
        }
        
        delay(1);
    }
    
    //Normal exit - kill life check
    ACS_Terminate(133,0);
	
	//Unblock player
	Thing_Remove(3568);
    
    // kill demon count per sector
    acs_terminate(969, 0);
    acs_terminate(968, 0);
    
    // terminate clickscanner
    acs_terminate(131, 0);
    
	//The following stuff was uncommented because it didn't work properly - when player is not in game, the script would terminate, failing to perform the check if player is in game.
    // is the player in the game?
    //if (playeringame(playernumber()))
    //{
        // purge commander view
        acs_executealways(650, 0, 5, 0, 0);
        
        if (c_Commander == 98)
        {
            thing_destroy(activatortid(), 1);
        }
        
        // disable commanding from player
        c_Commander = 99;
        
        f_TipShow("PLAYER", "", "Has left the command chair...", 10);
        
        // reset camera
        changecamera(0, 0, 0);
        
        // fade effect
        fadeto(0, 0, 0, 1.0, 0.0);
        fadeto(0, 0, 0, 0.0, 1.0);
        
        // unfreeze the player
        delay(10);
        setplayerproperty(0, 0, PROP_TOTALLYFROZEN);
    //}
    // if not
    /*else
    {
        // disable commanding from player
        c_Commander = 99;
        f_TipShow("PLAYER", "Commander Status", "They ran for the hills...", 1);
    }*/
    
    delay(35);
}

script 968 (void)
{
	while(1){
		 
		// display mouse pointer and HUD
		c_ShowCursor();
		delay(1);
	}
}

script 133 (void) //Checking if commander script is alive
{
	SetActivator(0); //Unexpected commander script termination won't kill this script
	while(1)
	{
		if(scriptpulse == 2) //Script is no longer resetting pulse - dead
		{
			scriptpulse = 0;
			// disable commanding from player
        	c_Commander = 99;
			//Remove blocker
			Thing_Remove(3568);
        	f_TipShow("PLAYER", "Commander Status", "They ran for the hills...", 1);
			terminate;
		}	
		scriptpulse++;
		delay(1);
	}
}

// VOTE KICK
script 132 (void)
{
    // make sure the vote system is not below zero
    if (c_KickVotes < 0)        c_KickVotes = 0;
    if (c_Commander == 99)
    {
        f_CenterTip("There is no commander to kick!");
        terminate;
    }
    
    if (p_KickSlot[playernumber()] == 1)
    {
        f_CenterTip("Your vote has already been cast!\nPlease wait for your vote to reset...");
        terminate;
    }
    
    else
    {
        f_CenterTip("You have voted to kick the commander...");
        f_TipShow("PLAYER", "", "Has voted to kick the commander...", 1);
        p_KickSlot[playernumber()] = 1;
        c_KickVotes ++;
        
        setfont("CONFONT");
        printbold(s:"Votes: ", d:c_KickVotes, s:"/", d:playercount()/2);
        
        if (c_KickVotes >= playercount()/2)
        {
            f_TipShow("INFO", "Kick Commander", "Vote Passed!", 0);
            delay(35);
            c_KickVotes = 0;
            c_Commander = 98;
        }
        
        delay(35 * 60);
        
        // reset vote
        p_KickSlot[playernumber()] = 0;
        c_KickVotes --;
    }
}

// demon count per sector
script 969 (void)
{
    while(1)
    {
        setfont("CONFONT");
        
        sethudsize(800, 600, 1);
        hudmessage(s:"Demon Count\n", s:"Sector 1: ", d:thingcount(0, 111), s:"\nSector 2: ", d:thingcount(0, 112), s:"\nSector 3: ", d:thingcount(0, 113), s:"\nBase: ", d:thingcount(0, 114); 1, 188, cr_white, 650.1, 400.1, 5.0);
        
        delay(35 * 3);
    }
}

// credit bypass
script 880 OPEN
{
	delay(35 * 3);
	c_Credits = c_Startcash;
}

















// COMMANDER HOTKEYS
script 881 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 1;
	acs_executealways(601, 0, 2, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 882 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 2;
	acs_executealways(601, 0, 3, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 883 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 3;
	acs_executealways(601, 0, 4, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 884 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 4;
	acs_executealways(601, 0, 5, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 885 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 5;
	acs_executealways(601, 0, 6, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 886 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 6;
	acs_executealways(601, 0, 7, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 887 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 7;
	acs_executealways(601, 0, 8, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 888 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 8;
	acs_executealways(601, 0, 9, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 889 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 9;
	acs_executealways(601, 0, 10, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 890 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 10;
	acs_executealways(601, 0, 11, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 891 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 11;
	acs_executealways(601, 0, 12, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
script 892 (void)
{
	if (c_Commander == playernumber()){
	c_ButtonSel = 12;
	acs_executealways(601, 0, 13, 0, 0);
	delay(1);
	fc_CommandButtons_Call();
	c_ManualClick  = 1;
	acs_executealways(131, 0, 0, 0, 0);
	}
}
