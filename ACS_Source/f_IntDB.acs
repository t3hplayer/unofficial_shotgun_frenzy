///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_IntDB.acs
// manages the sectors

// USEABLE NAMING CONVENTIONS
// f - Frenzy - Script related, or General Purpose
// g - Game - Important stuff involving the game functions
// p - Player - Player interaction
// c - Commander - Commander interaction
// m - Monster - Monster interaction
// l - Local - Locally used values
// s - Settings - Global game settings, mainly used for screen resolutions

// g_Status reminders:
// 0 = Games not active
// 1 = Game active, sector 1 under attack
// 2 = Sector 2 under attack
// 3 = Sector 3 under attack
// 4 = Standard Active

#library "f_IntDB"
#include "zcommon.acs"

// game
int g_Status;
int g_FinalSkillScore;
int g_SpecialPortal;
int g_AIDirector_TrackRockets;
int g_AIDirector_TrackPlasma;
int g_AIDirector_TrackFlamer;
int f_AIDir_SpawnCount;
int f_Gametype;
int g_TenMinMark;
int g_GuardianMode;

int aiSubtract;

// test variable
int playercountReplicate = 0;

// game settings
int f_UseScoreSystem;	// automatic research, used in CF and SD maps
int f_Startcash;                   // player starting cash, 2500 is the default
int c_Startcash;                      // starting cash for the commander (SF maps only)
int f_Doortype;                      // 0 is a normal door, 1 is a floor based door
int f_Doorspeed;                     // speed of the door opening, 50 is the default
int f_GameLength;                     // Gametime in minutes, +2 min after guardian warning, 28 default (30 min gametime)
int f_AISkillMultiplier;               // increase in levels, higher means harder (aka: the RapeFactor variable)
int f_SurvivalLastLevel;
int f_PercentFast = 0;                 // what percentage of enemies are randomly made fast

int f_Cacodemons;
int f_AdaptiveSpawning;

int f_AllowNuke;
int f_AllowIon;

// player
int p_Credits[31];
int p_Exp[31];
int p_Exp_Points[31];
int p_Rank[31];
int p_MenuSelection[31];
int p_MenuSelection_Active[31];
int p_MenuSelection_Category[31];
int p_MenuSelection_Limit[31];
int p_Streak[31];
int p_TipQue[10];
int p_TotalPlayerDeaths;
int p_Combo[31];
int p_SplatCombo[31];
int p_UpgradeStack[31];         // soon to be redundant
int p_TankSlot[31];             // player tank status
int p_KickSlot[31];
int p_LastWeap[31];//for the autowep switching feature
int p_MechUpgradeWeapons[31];
int p_MechUpgradeArmor[31];

// commander
int c_Commander = 99;
int c_Credits;
int c_Techflag[99];
int c_ButtonSel;        // selected button
int c_ButtonCat;        // current category
int c_ButtonClick;
int c_ConstructSpeed = 50;
int c_NukeLaunched;
int c_BridgeStatus_1;
int c_BridgeStatus_2;
int c_BridgeStatus_3;
int c_BridgeStatus_4;
int c_BridgeStatus_5;
int c_BridgeStatus_6;
int c_KickVotes;
int c_KickVotesNeeded;
int c_HaltSpawning;
int c_ManualClick;

int c_Onscreen_Time = 15.0;
int c_Onscreen_Type = 1;

// monster
int m_InSector[4];
int m_SpawnRate = 1;
int m_Wave = 1;
int m_WaveSub;
int m_SurvivalWave = 1;

// settings
int s_ScreenSize[3] = {800, 600, 1};

// exp needed to get rank
#libdefine NUM_RANKS 11
int p_RankExp[NUM_RANKS] = { 0, 50, 125, 190, 230, 300, 500, 1000, 2000, 3000, 0 };

// amount of credits given for killing monster by class
int p_MonsterCredits[7] = { 2, 10, 22, 27, 65, 90, 200 };       // { 2, 10, 20, 25, 60, 90, 200 };

// chance of dropping item on monster death
int p_MonsterItem[7] = { 2, 6, 8, 10, 13, 20, 25 };//{ 5, 10, 15, 25, 50, 75, 99 };

// monster item rewards for different classes
#libdefine NUM_MONSTER_REWARDS 4

str m_rewardItems0[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_Soulsphere",
    "Medikit"
  };
int m_rewardChances0[NUM_MONSTER_REWARDS] =
  { 25, 15, 10, 10 };

str m_rewardItems1[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_Megasphere"
  };

//"Rnd_Inventory_TurretBullet"

int m_rewardChances1[NUM_MONSTER_REWARDS] =
  { 25, 10, 10, 5 };

str m_rewardItems2[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_Megasphere",
    "Rnd_Inventory_Soulsphere"
  };
//"Rnd_Inventory_TurretBullet",

int m_rewardChances2[NUM_MONSTER_REWARDS] =
  { 40, 20, 20, 5 };

str m_rewardItems3[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_TurretBullet",
    "Rnd_Inventory_Soulsphere",
    "Rnd_Inventory_Berserk2"
  };

int m_rewardChances3[NUM_MONSTER_REWARDS] =
  { 50, 30, 20, 10 };

str m_rewardItems4[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_TeslaCoil",
    "Rnd_Inventory_TurretBullet",
    "Rnd_Inventory_Berserk2",
    "Rnd_Inventory_Godsphere"
  };

int m_rewardChances4[NUM_MONSTER_REWARDS] =
  { 30, 20, 20, 10 };

str m_rewardItems5[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_Berserk2",
    "Rnd_Inventory_Megasphere",
    "Rnd_Inventory_Godsphere",
    "Rnd_Inventory_AmmoGiver"
  };
int m_rewardChances5[NUM_MONSTER_REWARDS] =
  { 30, 25, 20, 20 };

str m_rewardItems6[NUM_MONSTER_REWARDS] =
  { 
    "Rnd_Inventory_Berserk2",
    "Rnd_Inventory_Megasphere",
    "Rnd_Inventory_Godsphere",
    "Rnd_Inventory_AmmoGiver"
  };
int m_rewardChances6[NUM_MONSTER_REWARDS] =
  { 50, 40, 20, 20 };

function void readconsole(void)
{
	int sf_startcash = GetCVar("sf_startcash");
	int sf_teamcash = GetCVar("sf_teamcash");
	int sf_gamelength = GetCVar("sf_gamelength");
	int sf_skillmult = GetCVar("sf_skillmult");
	int sf_adaptivespawn = GetCVar("sf_adaptivespawn");
	int sf_cacodemons = GetCVar("sf_cacodemons");
        int sf_percentfast = GetCVar("sf_percentfast");

	if (sf_startcash)
	{
		f_Startcash = sf_startcash;
	}

	if (sf_teamcash)
	{
		c_Startcash = sf_teamcash;
	}

	if (sf_gamelength)
	{
		f_Gamelength = sf_gamelength;
	}

	if (sf_skillmult)
	{
		f_AISkillMultiplier = sf_skillmult;
	}

	if (sf_adaptivespawn)
	{
		f_AdaptiveSpawning = sf_adaptivespawn;
	}

	if (sf_cacodemons)
	{
		f_Cacodemons = sf_cacodemons;
	}

	if (sf_percentfast)
	{
		f_PercentFast = sf_percentfast;
	}
}
