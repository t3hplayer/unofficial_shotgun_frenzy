///////////////////////////////////////////////////
//      SHOTGUN FRENZY
//   a mod by Wad'a'Holic

// f_PMenP.acs
// item purchase directory

#import "f_IntDB.acs"
#import "fl_Price.acs"
#import "f_Tip.acs"
#library "f_PMenP"
#include "zcommon.acs"

// menu slot status
int p_MenuSlot[31][8];
int f_MenuSlot_Y[8] = {200.1, 225.1, 250.1, 275.1, 300.1, 325.1, 350.1, 375.1};
int f_MenuHold = 20.1;

// kill the menu
function void p_MenuReveal_Kill (void)
{
    // make unfunctional
    p_MenuSelection_Active[playernumber()] = 1;
}

function int p_MenuReveal_CheckPack (int l_PackID)
{
    // to return
    int l_Result;
    
    // shotgunner backpack
    if (l_PackID == 1)
    {
        l_Result += checkinventory("SSG");
        l_Result += checkinventory("SSG_AutoLoad");
        l_Result += checkinventory("SSG_Explosive");
        l_Result += checkinventory("Quadshot");
        l_Result += checkinventory("Quadshot_Bayonet");
        l_Result += checkinventory("Quadshot_Explosive");
    }
    
    // assault backpack
    if (l_PackID == 2)
    {
        l_Result += checkinventory("Buckshot");
        l_Result += checkinventory("Buckshot_Chamber");
        l_Result += checkinventory("Buckshot_Explosive");
        l_Result += checkinventory("Spitter");
        l_Result += checkinventory("Spitter_SSG");
        l_Result += checkinventory("Spitter_GLauncher");
    }
    
    // support backpack
    if (l_PackID == 3)
    {
        l_Result += checkinventory("Stocker");
        l_Result += checkinventory("Healer");
    }
    
    // heavy backpack
    if (l_PackID == 4)
    {
        l_Result += checkinventory("Launcher");
        l_Result += checkinventory("Launcher_Multi");
        l_Result += checkinventory("Launcher_Exploder");
        l_Result += checkinventory("Flinger");
        l_Result += checkinventory("Flinger_Expander");
        l_Result += checkinventory("Flinger_MinePlacer");
    }
    
    // plasma backpack
    if (l_PackID == 5)
    {
        l_Result += checkinventory("Railgun");
        l_Result += checkinventory("Railgun_Taser");
        l_Result += checkinventory("Railgun_Slug");
        l_Result += checkinventory("PlasmaGun");
        l_Result += checkinventory("PlasmaGun_Advanced");
        l_Result += checkinventory("PlasmaGun_Spread");
    }
    
    // commando backpack
    if (l_PackID == 7)
    {
        l_Result += checkinventory("Dualshot");
        l_Result += checkinventory("Dualshot_Razor");
        l_Result += checkinventory("Repeater");
        l_Result += checkinventory("Repeater_DoubleSpeed");
        l_Result += checkinventory("Repeater_BlastShells");
    }
    
    // fire backpack
    if (l_PackID == 6)
    {
        l_Result += checkinventory("Flamer");
    }
    
    return l_Result;
}

function void p_MenuPurchase_Weapon (str l_Weapon1, str l_Weapon2, str l_SetWeapon, int l_KillMenu)
{
    // check credits
    if (p_Credits[playernumber()] >= f_Price[p_MenuSlot[playernumber()][p_MenuSelection[playernumber()]]])
    {
        // make sound
        localambientsound("p/deploy", 128);
        
        // subtract credits
        p_Credits[playernumber()] -= f_Price[p_MenuSlot[playernumber()][p_MenuSelection[playernumber()]]];
        
        // give the player his/her desired weapons
        giveinventory(l_Weapon1, 1);
        giveinventory(l_Weapon2, 1);
        setweapon(l_SetWeapon);
        
        // setups for AI director
        if (l_Weapon1 == "Launcher")    g_AIDirector_TrackRockets = 1;
        if (l_Weapon1 == "PlasmaGun")    g_AIDirector_TrackPlasma = 1;
        if (l_Weapon1 == "Flamer")    g_AIDirector_TrackFlamer = 1;
        
        // close the menu
        if (l_KillMenu > 0)
        {
            p_MenuReveal_Kill();
        }
    }
    
    else
    {
        print(s:"NOT ENOUGH CREDITS");
    }
}

function void p_MenuPurchase_Upgrade (str l_TakeWeapon, str l_GiveWeapon, int l_KillMenu, int l_ExpPoints)
{
    // check credits
    if (p_Exp_Points[playernumber()] >= l_ExpPoints)
    {
        // make sound
        localambientsound("p/upgrade", 128);
        
        // subtract credits
        p_Exp_Points[playernumber()] -= l_ExpPoints;
        
        // give the player his/her desired weapons
        takeinventory(l_TakeWeapon, 1);
        giveinventory(l_GiveWeapon, 1);
        setweapon(l_GiveWeapon);
        
        // close the menu
        if (l_KillMenu > 0)
        {
            p_MenuReveal_Kill();
        }
        
        // reset selection (fixes a lot of problems)
        p_MenuSelection[playernumber()] = 0;
    }
    
    else
    {
        print(s:"You need more Exp Points");
    }
}

function void p_MenuPurchase_Inventory (str l_Inventory, int l_KillMenu)
{
    // check credits
    if (p_Credits[playernumber()] >= f_Price[p_MenuSlot[playernumber()][p_MenuSelection[playernumber()]]])
    {
        // make sound
        localambientsound("p/heal", 128);
        
        // subtract credits
        p_Credits[playernumber()] -= f_Price[p_MenuSlot[playernumber()][p_MenuSelection[playernumber()]]];
        
        // give the player his/her desired weapons
        giveinventory(l_Inventory, 1);
        
        // close the menu
        if (l_KillMenu > 0)
        {
            p_MenuReveal_Kill();
        }
    }
    
    else
    {
        print(s:"You need more Exp Points");
    }
}

function void p_MenuPurchase_Script (int l_ScriptNum, int l_Arg1, int l_Arg2, int l_Arg3, int l_KillMenu)
{
    // check credits
    if (p_Credits[playernumber()] >= f_Price[p_MenuSlot[playernumber()][p_MenuSelection[playernumber()]]])
    {
        // subtract credits
        p_Credits[playernumber()] -= f_Price[p_MenuSlot[playernumber()][p_MenuSelection[playernumber()]]];
        
        // run the script
        acs_executealways(l_ScriptNum, 0, l_Arg1, l_Arg2, l_Arg3);
        
        // quick variables for menu refreshing
        if (l_ScriptNum == 305)         p_TankSlot[playernumber()] = 1;
        
        // close the menu
        if (l_KillMenu > 0)
        {
            p_MenuReveal_Kill();
        }
    }
    
    else
    {
        print(s:"NOT ENOUGH CREDITS");
    }
}

int lockBarricade = 0;

function void p_MenuPurchase_ScriptBarricade (int l_DoorOrFloor, int l_Tag, int l_Price)
{
    // check credits
    if (p_Credits[playernumber()] >= l_Price)
    {
        if (lockBarricade == 0){
        
            lockBarricade = 1;
            
            // subtract credits
            p_Credits[playernumber()] -= l_Price;
            
            // open door?
            if (l_DoorOrFloor == 0)        door_close(l_Tag, 5);
            else        floor_raisetohighest(l_Tag, 80);
            
            acs_execute(505, 0, l_Tag, l_DoorOrFloor, 0);
            f_TipShow("INFO", "BATTLEFIELD BARRICADE", "Has been constructed!", 0);
            
            // quick variables for menu refreshing
            p_MenuReveal_Kill();
        }
        else{
            print(s:"Barricade already constructed!");
        }
    }
    
    else
    {
        print(s:"NOT ENOUGH CREDITS");
    }
}

script 505 (int l_Tag, int l_DoorOrFloor){
        
        delay (35*60*3);
        
        // open door?
        if (l_DoorOrFloor == 0)        door_open(l_Tag, 5);
        else        floor_lowertolowest(l_Tag, 80);
        
        f_TipShow("INFO", "BATTLEFIELD BARRICADE", "Has expired!", 0);
        lockBarricade = 0;
}

function void p_MenuPurchase_Recycle (str l_TakeWeapon, int l_GiveCash)
{
    // check inventory
    localambientsound("p/upgrade", 128);
        
    // take and give cash
    takeinventory(l_TakeWeapon, 1);
    p_Credits[playernumber()] += l_GiveCash;
}  